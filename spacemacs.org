#+TITLE: My .spacemacs
#+PROPERTY: tangle ".spacemacs.el"
#+PROPERTY: noweb yes
* Initialization
  #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
;; function and macro definitions
<<functions>>

;;auto-modes
<<auto-modes>>

;; keybindings
<<keybindings>>

;; configuration
<<configuration>>
  #+END_SRC
* Custom functions
  :PROPERTIES:
  :header-args: :noweb-ref functions :tangle no
  :END:
** Typescript/JavaScript
   #+BEGIN_SRC emacs-lisp
     (defun dcl/toggle-ts-and-js-file (filename)
            (interactive (list (buffer-file-name)))
            (let* ((curline (line-number-at-pos))
                   (extension (file-name-extension filename))
                   (newfilename (concat
                                 (file-name-sans-extension filename)
                                 "."
                                 (cond
                                  ((equal extension '"ts") "js")
                                  ((equal extension '"js") "ts")
                                  (t (error "unknown extension: %s" extension))))))
              (find-file newfilename)
              (goto-line curline)))

     (defun skewer-eval-region (beg end &optional prefix)
       (interactive "r\nP")
       (skewer-eval (buffer-substring beg end) (if prefix #'skewer-post-print #'skewer-post-minibuffer)))

     (defun js/rspec-targetize-file-name (a-file-name extension)
       "Return A-FILE-NAME but converted into a non-spec file name with EXTENSION."
       (concat (file-name-directory a-file-name)
               (rspec-file-name-with-default-extension
                (replace-regexp-in-string "_spec\\.js.coffee" (concat "." extension)
                                          (file-name-nondirectory a-file-name)))))

     (defun js/rspec-target-file-for (a-spec-file-name)
       "Find the target for A-SPEC-FILE-NAME."
       (cl-loop for extension in (list "js" "coffee")
                for candidate = (js/rspec-targetize-file-name a-spec-file-name
                                                              extension)
                for filename = (cl-loop for dir in (cons "."
                                                         rspec-primary-source-dirs)
                                        for target = (replace-regexp-in-string
                                                      "/spec/"
                                                      (concat "/" dir "/")
                                                      candidate)
                                        if (file-exists-p target)
                                        return target)
                if filename
                return filename))
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
     (define-derived-mode ruby-trace-mode grep-mode "RbTrace"
       "Highlights matches from a Tracer run."
       ;; (unless (assoc 'ruby-trace-mode hs-special-modes-alist)
       ;;   (push '(ruby-trace-mode
       ;;           "^\\(?:#[0-9]+:\\)?\\(.*?[^/\n]\\):[   ]*\\([1-9][0-9]*\\)[  ]*:\\(?:\\(?:\\w\\|\\(?:::\\)\\)+\\):>:"
       ;;           "^\\(?:#[0-9]+:\\)?\\(.*?[^/\n]\\):[   ]*\\([1-9][0-9]*\\)[  ]*:\\(?:\\(?:\\w\\|\\(?:::\\)\\)+\\):<:"
       ;;           ) hs-special-modes-alist))
       (setq-local compilation-error-regexp-alist '(ruby-trace))
       (setq-local compilation-error-regexp-alist-alist '((ruby-trace "^\\(?:#[0-9]+:\\)?\\(.*?[^/\n]\\):[   ]*\\([1-9][0-9]*\\)[  ]*:" 1 2)))
       ;; (setq-local comment-start "$$$$$!!")
       ;; (setq-local comment-end "$$$$$!!")
       ;; (setq-local hs-special-modes-alist '((ruby-trace-mode ":>:" ":<:")))
       )

      (defun dcl/ruby-copy-camelized-class (beg end)
       "Camelizes the current region's class name."
       (interactive "r")
       (let* ((class-name (buffer-substring beg end))
              (no-module-or-class-name (replace-regexp-in-string " *\\(module\\|class\\) " "" class-name)))
         (kill-new (message (s-join "::" (s-split "\n" no-module-or-class-name))))))

     (defvar ruby-trace-default-location "/tmp/tracer_output.rb_trace" "Location for the current ruby trace file.")

     (defun dcl/wrap-region (beg end start-text end-text)
       "Wraps the currently-active region."
       (interactive "r\nsStart with: \nsEnd with: ")
       (let ((code (buffer-substring beg end)))
         (goto-char beg)
         (delete-region (point) end)
         (insert (format "%s\n%s\n%s" start-text code end-text))))

     (defun dcl/ruby-trace-region (beg end)
       "Adds a 'Tracer.on' call around region."
       (interactive "r")
       (dcl/wrap-region beg
                        end
                        (format
                         "require 'tracer'; Tracer.stdout = File.open('%s', 'a'); Tracer.on {"
                         ruby-trace-default-location)
                        "}"))

     (defun dcl/ruby-gc-trace-region (beg end)
       "Adds a 'GC.start_logging' call around region."
       (interactive "r")
       (dcl/wrap-region beg end
                        "require 'gc_tracer'; GC::Tracer.start_logging(gc_stat: true, gc_latest_gc_info: true, rusage: true) {"
                        "}"))

     (defun dcl/ruby-profile-region (beg end)
       "Adds a RubyProf block around region."
       (interactive "r")
       (dcl/wrap-region beg end
                        "require 'ruby-prof'; RubyProf::MultiPrinter.new(RubyProf.profile {"
                        "}).print(path: '/tmp', profile: 'ruby-prof.txt')"))

     (defun dcl/ruby-benchmark-region (beg end)
       "Adds a 'Benchmark.ms' call around region."
       (interactive "r")
       (dcl/wrap-region beg end "Benchmark.ms {" "}"))

     (defun dcl/ruby-special-setup ()
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "oB" "bundler"
        '(("l" dcl/bundle-config-local-gem-use)
          ("d" dcl/bundle-config-local-gem-delete)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "os" "repl"
        '(("b" ruby-send-buffer)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "ot" "test"
        '(("d" ruby/rspec-verify-directory)
          ("j" dcl/run-jasmine-specs)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "of" "file"
        '(("y" rails-copy-relative-path)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "od" "debug"
        '(("p" pmd/print-vars)
          ("r" dcl/ruby-remove-puts-vars)
          ("t" dcl/ruby-trace-region)
          ("f" dcl/ruby-profile-region)
          ("g" dcl/ruby-gc-trace-region)
          ("b" dcl/ruby-benchmark-region)
          ("c" dcl/ruby-rspec-profiling-console)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "ob" "breakpoints"
        '(("b" ruby-insert-breakpoint)
          ("p" ruby-save-page)
          ("s" ruby-save-screenshot)
          ("r" ruby-remove-breakpoints)))
       (dcl/leader-keys-major-mode
        '(enh-ruby-mode ruby-mode) "ox" "text"
        '(("m" dcl/ruby-copy-camelized-class)))
       (dcl/ruby-embrace-setup)
       (auto-fill-mode 1)
       (setq-local zeal-at-point-docset "ruby,rails")
       (setq-local before-save-hook (add-to-list 'before-save-hook 'whitespace-cleanup)))

     (defun ruby/rspec-verify-directory (prefix dir)
       (interactive "P\nDrspec directory: ")
       (rspec-run-single-file dir (concat (rspec-core-options) (if (and prefix (>= (car prefix) 4)) (format " --seed %d" (read-number "Seed: "))))))

     (defun current-line-empty-p ()
       (save-excursion
         (beginning-of-line)
         (looking-at "[[:space:]]*$")))

     (defmacro dcl/ensure-newline (&rest body)
       `(progn (unless (current-line-empty-p) (progn (end-of-line) (newline)))
               (progn ,@body)))

     (defmacro dcl/ruby-ensure-newline (&rest body)
       `(dcl/ensure-newline ,@body (ruby-indent-line)))

     (defun dcl/markdown-embedded-image (alt-text)
       (interactive "sAlt text: ")
       (message (kill-new (format "![%s](data:image/%s;%s)" alt-text (file-name-extension (buffer-file-name)) (base64-encode-string (buffer-substring-no-properties (point-min) (point-max)))))))

     (defun dcl/tmp-file-name ()
       (format "/tmp/%s_%d" (file-name-base) (random 9999)))

     (defun ruby-save-page ()
       (interactive)
       (dcl/ruby-ensure-newline
        (insert (format "save_page('%s.html')" (dcl/tmp-file-name)))))

     (defun ruby-save-screenshot ()
       (interactive)
       (dcl/ruby-ensure-newline
        (insert (format "save_screenshot('%s.png')" (dcl/tmp-file-name)))))

     (defvar ruby-ignore-breakpoint-format "ignore_breakpoint")

     (defun ruby-insert-breakpoint ()
       (interactive)
       (let ((ignore_bp_var (format "%s_%s" ruby-ignore-breakpoint-format (number-to-string (random 99999)))))
         (unless (current-line-empty-p) (progn (end-of-line) (newline)))
         (insert (format "binding.pry unless %s" ignore_bp_var))
         (ruby-indent-line)
         (beginning-of-line)
         (let ((old-point (point)))
           (save-excursion (ruby-beginning-of-defun)
                           (unless (equal old-point (point)) (forward-line))
                           (insert (format "%s = false\n" ignore_bp_var))
                           (forward-line -1)
                           (ruby-indent-line)))))

     (defun ruby-remove-breakpoints-in-region (beg end)
       (dolist (bp-pattern (list ruby-ignore-breakpoint-format "binding.pry" "save"))
         (save-excursion (delete-matching-lines bp-pattern beg end))))

     (defun ruby-remove-breakpoints ()
       (interactive)
       (let ((rbeg (if (region-active-p) (region-beginning) (save-excursion (beginning-of-defun) (point))))
             (rend (if (region-active-p) (region-end) (1- (save-excursion (end-of-defun) (point))))))
         (ruby-remove-breakpoints-in-region rbeg rend)))

     (defmacro dcl/with-custom-region (rbegf rendf &rest body)
       `(let ((rbeg (if (region-active-p) beg (save-excursion ,rbegf (point))))
              (rend (if (region-active-p) end (1- (save-excursion ,rendf (point))))))
          (progn ,@body)))

     (defun dcl/ruby-remove-puts-vars ()
       (interactive)
       (dcl/with-custom-region
        (beginning-of-buffer)
        (end-of-buffer)
        (save-excursion (delete-matching-lines "var-debug: " rbeg rend))))

     (defun dcl/ruby-rspec-profiling-console ()
       (interactive)
       (projectile-rails-with-root
        (progn
          (with-current-buffer (run-ruby "bundle exec rake rspec_profiling:console"))
          (projectile-rails-mode +1))))

     (defun dcl/ruby-embrace-setup ()
       (mapc (lambda (key) (setq-local evil-embrace-evil-surround-keys (cl-remove key evil-embrace-evil-surround-keys))) '(?\{ ?\}))
       (embrace-add-pair ?{ "{" "}")
       (embrace-add-pair ?# "#{" "}")
       (embrace-add-pair ?d "do " " end")
       (embrace-add-pair ?l "->() {" "}"))

     (defun ruby-eval-line (lines)
       (interactive "p")
       (dotimes (i lines)
         (ruby-send-region (line-beginning-position) (line-end-position))
         (next-line (signum lines))))

     (defun ruby-insert-methods-check ()
       (interactive)
       (forward-char)
       (insert ".methods.uniq.sort"))

     (defun rails-copy-relative-path ()
       (interactive)
       (message (kill-new (replace-regexp-in-string (regexp-opt (list (or (projectile-rails-root) ""))) "" (buffer-file-name)))))

       ;;; linter setup
     (defun setup-rails-linters ()
       (dolist (elisp (list "~/code-examples/haml-lint-flycheck" "~/code-examples/sass-lint-flycheck"))
         (load elisp)))

     (defvar jasmine-compilation-buffer-name "*jasmine:ci*")

     ;;; taken from http://stackoverflow.com/a/3072831
     (defun colorize-compilation-buffer ()
       (let ((inhibit-read-only t))
         (ansi-color-apply-on-region (point-min) (point-max))))

     (defun dcl/run-jasmine-specs (prefix)
       "Runs jasmine specs in Rails project root directory."
       (interactive "P")
       (projectile-rails-with-root
        (progn
          (let ((compilation-buffer-name-function (lambda (majormode) jasmine-compilation-buffer-name)))
            (compile (concat "bundle exec rake jasmine:ci" (if prefix (let ((seed (read-number "Seed: "))) (format "\\[%s,%s\\]" seed seed)))))
            (with-current-buffer jasmine-compilation-buffer-name
              (setq-local compilation-filter-hook 'colorize-compilation-buffer))))))

     (defun dcl/ruby-staged-files-hook ()
       "Runs `rubocop-autocorrect-current-file' and `reek-check-current-file' on currently staged .rb files."
       (interactive)
       (dolist (ruby-file (--filter (string-match-p ".rb$" it) (magit-staged-files)))
         (with-current-buffer (find-file-noselect ruby-file)
           (rubocop-autocorrect-current-file)
           (if (fboundp 'reek-check-current-file)
               (reek-check-current-file)))))

     (defun dcl/make-test-sh-file (filename)
       "Generates a shell script that runs the current file as an rspec test, for bisecting."
       (interactive "F")
       (let ((test-file (buffer-file-name)))
         (with-temp-file filename
           (insert "#!/bin/bash\n")
           (insert (format "bundle exec rspec %s" test-file)))))
   #+END_SRC

*** Haml
    #+BEGIN_SRC emacs-lisp
      (defun dcl/haml-special-setup ()
        (dcl/leader-keys-major-mode
         '(haml-mode) "od" "debug"
         '(("p" pmd/print-vars)))
        (setq-local comment-start "//")
        (setq-local before-save-hook (add-to-list 'before-save-hook 'whitespace-cleanup)))
    #+END_SRC

*** Bundler
    #+BEGIN_SRC emacs-lisp
      (defun dcl/bundle-config-local-gem-use (gem gem-location)
        "Runs `bundle config local.GEM' with gem in GEM-LOCATION."
        (interactive "sGem: \nDLocal gem directory: ")
        (let ((bundle-command (format "bundle config --local local.%s %s" gem gem-location)))
          (message bundle-command)
          (shell-command bundle-command)))

      (defun dcl/bundle-config-local-gem-delete (config)
        "Deletes bundle configuration"
        (interactive (list (completing-read "bundle config option: " (s-lines (shell-command-to-string "bundle config | grep -v '^Set' | sed '/^$/d'")))))
        (let ((bundle-command (format "bundle config --delete %s" config)))
          (message bundle-command)
          (shell-command bundle-command)))
    #+END_SRC
*** Sass
    #+BEGIN_SRC emacs-lisp
      (defun sass-prepare-input-buffer ()
        "Inserts common imports into the temporary buffer with the code to be evaluated."
        (goto-char (point-min))
        (insert-file-contents "/home/dancluna/dotfiles/pre-eval-code.sass"))
    #+END_SRC
*** CoffeeScript
    #+BEGIN_SRC emacs-lisp
      (defun dcl/coffee-special-setup ()
        (dcl/leader-keys-major-mode
         '(coffee-mode) "od" "debug"
         '(("p" pmd/print-vars)))
        (dcl/leader-keys-major-mode
         '(coffee-mode) "ot" "test"
         '(("j"  dcl/run-jasmine-specs)))
        (setq-local zeal-at-point-docset "coffee,javascript,jQuery")
        (setq-local rspec-spec-file-name-re "\\(_\\|-\\)spec\\.js")
        (setq-local before-save-hook (add-to-list 'before-save-hook 'whitespace-cleanup)))
    #+END_SRC
** Elisp
   #+BEGIN_SRC emacs-lisp
     ;; creating a tags file from emacs - stolen from https://www.emacswiki.org/emacs/BuildTags
     (defun ew/create-tags (dir-name)
       "Create tags file."
       (interactive "DDirectory: ")
       (shell-command
        (format "ctags -f %s -e -R %s" "TAGS" (directory-file-name dir-name))))

     (defun dcl/leader-keys-major-mode (mode-list prefix name key-def-pairs)
       (let ((user-prefix (concat "m" prefix)))
         (dolist (mode mode-list)
           (spacemacs/declare-prefix-for-mode mode "mo" "custom")
           (spacemacs/declare-prefix-for-mode mode user-prefix name)
           (dolist (key-def-pair key-def-pairs)
             (destructuring-bind (key def) key-def-pair
               (spacemacs/set-leader-keys-for-major-mode mode (concat prefix key) def))))))

     (defmacro dcl/make-helm-source (name desc cand-var action &rest body)
       (let ((candidate-source-fn-name (intern (format "%s-candidates" name)))
             (helm-source-var-name (intern (format "%s-helm-source" name))) )
         `(progn
            (defun ,candidate-source-fn-name ()
              ,@body)
            (defvar ,helm-source-var-name
              '((name . ,(capitalize desc))
                (candidates . ,candidate-source-fn-name)
                (action . (lambda (,cand-var) ,action))))
            (defun ,name ()
              ,(concat "Helm source for " desc)
              (interactive)
              (helm :sources '(,helm-source-var-name))))))
     (put 'dcl/make-helm-source 'lisp-indent-function 'defun)

     (dcl/make-helm-source dcl/lib-code-magit-status "directories under ~/code"
       dir (magit-status dir) (directory-files "~/code" t))

     (defun dcl/favorite-text-scale ()
       (unless (equal major-mode 'term-mode)
         (text-scale-set 2)))

     (defun date-time-at-point (unix-date)
       (interactive (list (thing-at-point 'word t)))
       (message (shell-command-to-string (format "date --date @%s" unix-date))))

     (defun dcl/freebsd-user-agent ()
       (interactive)
       (message (kill-new "Mozilla/5.0 (X11; FreeBSD amd64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36")))

     (defun helm-dash-use-docsets (&rest docsets)
       ;; (dolist (docset docsets)
       ;;   (add-to-list 'helm-dash-common-docsets docset))
       )
   #+END_SRC
*** Keyboard macros turned into functions
    #+BEGIN_SRC emacs-lisp
      (fset 'dcl/eshell-circleci-ssh-to-tramp
            [?i ?c ?d ?  ?/ escape ?E ?l ?r ?: ?l ?d ?W ?\" ?a ?d ?E ?x ?$ ?a ?# escape ?A escape ?\" ?a ?p ?a ?: ?~ ?/ escape])
    #+END_SRC
*** Random
    #+BEGIN_SRC emacs-lisp
      (defun dcl/minibuffer-setup ()
        ;; (setq-local face-remapping-alist
        ;;             '((default ( :height 3.0 ))))
        )

      (defmacro dcl/add-env-toggle (toggle-var toggle-key &optional toggle-on-expression)
        (let ((toggle-var-interned (intern (s-replace "_" "-" (downcase toggle-var))))
              (toggle-on (or toggle-on-expression "true")))
          `(spacemacs|add-toggle ,toggle-var-interned
             :status (getenv ,toggle-var)
             :on (setenv ,toggle-var ,toggle-on)
             :off (setenv ,toggle-var nil)
             :evil-leader ,(concat "ot" toggle-key)
             ,@(if toggle-on-expression (list :on-message `(format "%s's value is now %s" ,toggle-var (getenv ,toggle-var))))
             ))
        )

      (defun dcl/filip-slowpoke ()
        (interactive)
        (message "Escape delay is now %f" (setq evil-escape-delay 0.4)))

      (defun dcl/normal-delay ()
        (interactive)
        (message "Escape delay is now %f" (setq evil-escape-delay 0.1)))


      (defun us-phone-number ()
        (interactive)
        (message (kill-new "732-757-2923")))

      (defun browse-url-current-file ()
        (interactive)
        (helm-aif (buffer-file-name)
            (browse-url it)))
    #+END_SRC
*** Hex
    #+BEGIN_SRC emacs-lisp
      (defun hexstring-at-point ()
        "Return the hex number at point, or nil if none is found."
        (when (thing-at-point-looking-at "[0-9abcdef]+" 500)
          (buffer-substring (match-beginning 0) (match-end 0))
          ))

      (put 'hexstring 'thing-at-point 'hexstring-at-point)

      (defun dcl/string-to-char-code (prefix)
        "Turns the numeric string at point into a string with words"
        (interactive "P")
        (let* ((numeric-str (thing-at-point 'hexstring t))
               (padded (s-pad-left 8 "0" numeric-str))
               (partitioned (seq-partition padded 2)))
          (kill-new (message (mapconcat 'identity
                                        (mapcar (lambda (char-pair) (format "\\x%s" char-pair))
                                                (if prefix (reverse partitioned) partitioned))
                                        "")))))
    #+END_SRC
*** Blog
    #+BEGIN_SRC emacs-lisp
      (defun dcl/new-blog-post (post-title)
        (interactive "sPost title:")
        (find-file-other-window (format "%s/%s-%s.md" "/home/dancluna/code/dcluna.github.io/_posts" (format-time-string "%Y-%m-%d" (current-time)) post-title)))
    #+END_SRC
*** Work-related
    #+BEGIN_SRC emacs-lisp
      (defvar dcl-rate-per-hour (string-to-number (getenv "RATE_PER_HOUR")))

      (defun dcl/stackbuilders-invoice-template (hours-worked)
        (interactive "nHours worked: \n")
        (kill-new (message "Total due for IT services provided to Stack Builders: $%s USD" (* dcl-rate-per-hour hours-worked))))

      (defvar revealjs-location (or (getenv "REVEALJS_DIR"))
        "Location of the reveal.js files")

      (defun dcl/generate-revealjs-org-presentation (filename)
        "Generates FILENAME (probably an org-mode file) and symlinks the reveal.js files in the same directory."
        (interactive "F")
        (let ((directory (file-name-directory (expand-file-name filename))) )
          (make-directory directory t)
          (find-file filename)
          (assert (equal default-directory directory))
          (unless (file-exists-p "./reveal.js")
            (shell-command (format "ln -s %s reveal.js" revealjs-location)))))
    #+END_SRC
*** LastPass
    This depends on [[https://github.com/lastpass/lastpass-cli][lastpass-cli]].

    #+BEGIN_SRC emacs-lisp
      (defun dcl/lastpass-import-table ()
        "Imports to LastPass from Org-table at point."
        (interactive)
        (let ((tmpfile (make-temp-file "lpimp")))
          (org-table-export tmpfile "orgtbl-to-csv")
          (message (shell-command-to-string (format "lpass import < %s" tmpfile)))
          (delete-file tmpfile)))
    #+END_SRC
*** Pivotal Tracker / JIRA
    #+BEGIN_SRC emacs-lisp
      (defun dcl/pivotal-github-tasks-template (beg end)
        "Copies current region (which should be a list of tasks in pivotal.el) and outputs a task list in Markdown format."
        (interactive "r")
        (let ((task-list (buffer-substring beg end)))
          (kill-new
           (with-temp-buffer
             (insert task-list)
             (goto-char (point-min))
             (while (re-search-forward "^[^-]+--" nil t)
               (replace-match "- [ ]"))
             (buffer-string)))))

      (defun dcl/pivotal-ticket-url (ticketid)
        (interactive "sPivotal ticket id: ")
        (format "https://www.pivotaltracker.com/story/show/%s" ticketid))

      (defun dcl/pivotal-ticket-id-from-url (url)
        (replace-regexp-in-string ".*/\\([0-9]+\\)$" "\\1" ticketid-or-pivotal-link))

      (defun dcl/sanitize-branch-name (string)
        "Returns STRING without any special characters, with normalized whitespace and spaces are transformed into underscores."
        (let ((no-special-chars-string
               (replace-regexp-in-string "\\([^a-zA-Z0-9 \/]\\)" "" string)))
          (replace-regexp-in-string "_$" "" (replace-regexp-in-string "^_" "" (replace-regexp-in-string "__+" "_" (downcase (replace-regexp-in-string "[\s-\/]" "_" no-special-chars-string)))))))

      (defun dcl/create-branch-from-jira (jira-url branch-name)
        (interactive "sJIRA url: \nsBranch name: ")
        (let* ((ticket-id (replace-regexp-in-string "^.*/\\([^/]+\\)$" (lambda (text) (downcase (replace-regexp-in-string "-" "_" (match-string 1 text)))) jira-url))
               (sanitized-branch-name (dcl/sanitize-branch-name branch-name))
               (new-branch-name (format "%s_%s" ticket-id sanitized-branch-name)))
          (with-magit-status-for "haystak" "~/client-code/haystak"
                                 (magit-branch new-branch-name "master")
                                 (magit-checkout new-branch-name)
                                 (call-interactively 'magit-push-current-to-pushremote)))
        )

      (defun dcl/create-branch-from-pivotal (pivotal-tracker branch-name)
        (interactive "sPivotal Tracker URL: \nsBranch name: ")
        (let* ((pivotal-tracker-ticket-id (replace-regexp-in-string "^.*/\\([0-9]+\\)$" "\\1" pivotal-tracker))
               (sanitized-branch-name (dcl/sanitize-branch-name branch-name))
               (new-branch-name (format "dl_%s_%s" pivotal-tracker-ticket-id sanitized-branch-name)))
          (magit-branch new-branch-name "master")
          (magit-checkout new-branch-name)
          (call-interactively 'magit-push-current-to-pushremote)))
    #+END_SRC
*** Emacspeak
    #+BEGIN_SRC emacs-lisp
      (defun dcl/enable-emacspeak ()
        "Loads emacspeak if the proper environment variables are set."
        (if-let ((dir (getenv "EMACSPEAK_DIR"))
                 (enable (getenv "ENABLE_EMACSPEAK")))
            (load-file (concat dir "/lisp/emacspeak-setup.el"))))
    #+END_SRC
*** Evil
    #+BEGIN_SRC emacs-lisp
      (defun dcl/set-local-evil-escape ()
        (interactive)
        (setq-local evil-escape-key-sequence "fd"))

      (defmacro dcl/many-times-interactive-command (arg-name iter-var-name &rest body)
        (let ((times-sym (gensym "times"))
              (iter-var iter-var-name))
          `(let ((,times-sym (or ,arg-name 1)))
             (dotimes (,iter-var ,times-sym)
               (progn
                 ,@body)
               (unless (equal ,times-sym 1)
                 (forward-line (signum ,times-sym)))))))

      (defun dcl/evil-ex-run-current-line (arg)
        (interactive "p")
        (dcl/many-times-interactive-command arg var (evil-ex (concat "! " (current-line)))))
    #+END_SRC
*** Git/Magit
    #+BEGIN_SRC emacs-lisp
      (defun dcl/magit-branch-rebase ()
        (interactive)
        (let ((curbranch (magit-name-branch "HEAD"))
              (var 0)
              (created nil))
          (while (and (not created) (< var 10))
            (let ((branch-name (format "%s_before_rebase%s"
                                       curbranch
                                       (if (> var 0)
                                           (format "_%d" var)
                                         ""))))
              (when (not (magit-branch-p branch-name))
                (magit-branch branch-name curbranch)
                (message (concat "Created branch " branch-name))
                (setq created t)))
            (setq var (1+ var)))
          (unless created
            (message "before-rebase branch was not created, remove a few of them"))))

      (defun git/get-branch-url ()
        "Returns the name of the remote branch, without 'origin'."
        (replace-regexp-in-string
         "^origin\/"
         ""
         (substring-no-properties (magit-get-push-branch))))

      ;; taken from http://endlessparentheses.com/create-github-prs-from-emacs-with-magit.html
      (defun endless/visit-pull-request-url (base)
        "visit the current branch's pr on github and compares it against BASE."
        (interactive (list (magit-read-other-branch-or-commit "Compare with")))
        (browse-url
         (format "%s/compare/%s...%s"
                 (replace-regexp-in-string "git@github.com:" "https://www.github.com/"
                                           (replace-regexp-in-string "\.git$" "" (magit-get "remote.origin.url")))
                 base
                 (git/get-branch-url)
                 )))

      (defun github/copy-branch-url ()
        "Copies the current branch's url on Github. Does not check if it actually exists before copying."
        (interactive)
        (message
         (kill-new
          (format "%s/tree/%s"
                  (replace-regexp-in-string "git@github.com:" "https://github.com/"
                                            (replace-regexp-in-string "\.git$" "" (magit-get "remote.origin.url")))
                  (git/get-branch-url)
                  ))))

      (defun github/copy-file-url (curbranch)
        (interactive (list (magit-read-branch "Branch: ")))
        (let* ((toplevel (replace-regexp-in-string "\/$" "" (magit-toplevel)))
               (curbranch (or curbranch (magit-get-current-branch)))
               (pathtofile (replace-regexp-in-string (regexp-quote toplevel) "" (buffer-file-name))))
          (message
           ;; format: $REMOTE-URL/blob/$BRANCH/$PATHTOFILE
           (kill-new (format "%s/blob/%s%s#%s"
                             (replace-regexp-in-string "\.git$" "" (magit-get "remote.origin.url"))
                             curbranch
                             pathtofile
                             (mapconcat (lambda (pos) (format "L%s" (line-number-at-pos pos)))
                                        (if (region-active-p)
                                            (list (region-beginning) (region-end))
                                          (list (point))) "-"))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun magit-history-checkout ()
        (interactive)
        (magit-checkout (magit-completing-read "Branch: " (magit-history-branches))))

      (defun magit-history-branches ()
        (let ((i 1)
              (history-item nil)
              (current-item 'none)
              (current-branch (magit-rev-parse "--abbrev-ref" "HEAD"))
              (stop nil)
              (branch-list nil))
          (while (not stop)
            (setq history-item (format "@{-%d}" i))
            (setq current-item (magit-rev-parse "--abbrev-ref" history-item))
            (cond ((not (equalp history-item current-item))
                   (if (and current-item (not (equalp current-item current-branch)))
                       (add-to-list 'branch-list current-item t)))
                  (t (setq stop t)))
            (setq i (1+ i)))
          branch-list))

      ;;; todo: add this to spacemacs, or magit, or wherever this is defined
      (defun dcl/set-fill-column-magit-commit-mode ()
        ;; magit always complains that 'line is too big' w/ the old fill-column values (72, I think). I set this to something a little smaller
        (setq fill-column 52))
    #+END_SRC
*** Eshell
    #+BEGIN_SRC emacs-lisp
      (defun dcl/eshell-pipe-to-buffer (buffer-name)
        (interactive "sBuffer name: ")
        (insert (format " > #<buffer %s>" buffer-name)))
    #+END_SRC
*** XML
    #+BEGIN_SRC emacs-lisp
      ;;; thanks to https://www.emacswiki.org/emacs/EmilioLopes for this code, found in https://www.emacswiki.org/emacs/NxmlMode#toc11
      (defun nxml-where ()
        "Display the hierarchy of XML elements the point is on as a path."
        (interactive)
        (let ((path nil))
          (save-excursion
            (save-restriction
              (widen)
              (while (and (< (point-min) (point)) ;; Doesn't error if point is at beginning of buffer
                          (condition-case nil
                              (progn
                                (nxml-backward-up-element) ; always returns nil
                                t)
                            (error nil)))
                (setq path (cons (xmltok-start-tag-local-name) path)))
              (kill-new (if (called-interactively-p t)
                            (message "/%s" (mapconcat 'identity path "/"))
                          (format "/%s" (mapconcat 'identity path "/"))))))))
    #+END_SRC
** Perl
   #+BEGIN_SRC emacs-lisp
     (defun dcl/perl1line-txt ()
       (interactive)
       (find-file-other-window "/home/dancluna/code/perl1line.txt/perl1line.txt")
       (read-only-mode 1))
   #+END_SRC
* Auto modes
  :PROPERTIES:
  :header-args: :noweb-ref auto-modes :tangle no
  :END:
** Auto-mode-alist
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("messages_ccodk_default.txt" . conf-javaprop-mode))
     (add-to-list 'auto-mode-alist '("\\.grep\\'" . grep-mode))
     (add-to-list 'auto-mode-alist '("\\.cljs\\'" . clojure-mode))
     (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))
     (add-to-list 'auto-mode-alist '("\\.aws-secrets\\'" . cperl-mode))
     (add-to-list 'auto-mode-alist '("\\.vagrantuser\\'" . yaml-mode))
     (add-to-list 'auto-mode-alist '("\\.irbrc\\'" . ruby-mode))
     (add-to-list 'auto-mode-alist '("\\.pryrc\\'" . ruby-mode))
     (add-to-list 'auto-mode-alist '("\\spec.rb\\'" . rspec-mode))
     (add-to-list 'auto-mode-alist '("\\.yml.example\\'" . yaml-mode))
     (add-to-list 'auto-mode-alist '("\\.cap\\'" . enh-ruby-mode))
     (add-to-list 'auto-mode-alist '("\\.shen\\'" . shen-mode))
     (add-to-list 'auto-mode-alist '("\\.rb_trace\\'" . ruby-trace-mode))
     (add-to-list 'auto-mode-alist '("\\.sequelizerc\\'" . js2-mode))

     (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
   #+END_SRC
* Keybindings
  :PROPERTIES:
  :header-args: :noweb-ref keybindings :tangle no
  :END:

  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)

  (spacemacs/set-leader-keys-for-major-mode 'typescript-mode "ots" 'dcl/toggle-ts-and-js-file)
  (spacemacs/set-leader-keys-for-major-mode 'js2-mode "ots" 'dcl/toggle-ts-and-js-file)
  #+END_SRC
* Configuration
  :PROPERTIES:
  :header-args: :noweb-ref configuration :tangle no
  :END:
** Workarounds
*** Issue with howdoi-query on Emacs 26
    html2text is not defined there, so I'm using the function under `shr` to
    render the buffer returned in howdoi-query.
    #+BEGIN_SRC emacs-lisp
      (unless (fboundp 'html2text)
        (fset 'html2text (lambda () (shr-render-region (point-min) (point-max)))))
    #+END_SRC
*** Pager in inferior shells
    Multi-term, ansi-term and friends don't play well with the default pager.
    #+BEGIN_SRC emacs-lisp
  (setenv "PAGER" "/bin/cat")
    #+END_SRC
*** Default text scale
    Don't know if this is the "right" way to set the font size, but my eyes hurt w/ smaller fonts
    #+BEGIN_SRC emacs-lisp
  (add-hook 'after-change-major-mode-hook 'dcl/favorite-text-scale)
    #+END_SRC
*** Ignore purpose-mode (dedicated windows)
    #+BEGIN_SRC emacs-lisp
  (purpose-mode -1)
    #+END_SRC
*** Setup minibuffer font size
    Tweak this function when you want to change it.
    #+BEGIN_SRC emacs-lisp
  (add-hook 'minibuffer-setup-hook 'dcl/minibuffer-setup)
    #+END_SRC
** Zeal/Dash docsets
   #+BEGIN_SRC emacs-lisp
 (let ((helm-dash-mode-alist
         '((python-mode-hook . '("Python" "NumPy"))
           (ruby-mode-hook . '("Ruby" "Ruby on Rails"))
           (js2-mode-hook  . '("JavaScript" "D3JS" "NodeJS" "Ionic"))
           (coffee-mode-hook . '("CofeeScript" "D3JS" "NodeJS" "Ionic"))
           (emacs-lisp-mode-hook . '("Emacs Lisp"))
           )))
    (dolist (alist helm-dash-mode-alist)
      (destructuring-bind (mode-hook . docsets) alist
        (lexical-let ((docset docsets))
          (add-hook mode-hook (lambda () (helm-dash-use-docsets docset)))))))
  (setq dash-helm-dash-docset-path "/home/dancluna/.docsets")
   #+END_SRC
** git/magit
    #+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-mode 'dcl/set-fill-column-magit-commit-mode)

  (add-hook 'magit-mode-hook 'dcl/set-local-evil-escape)

  (setq git-link-open-in-browser nil)
    #+END_SRC

** Major modes
*** All modes
    #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'whitespace-cleanup)
    #+END_SRC
*** Lisp
    #+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/home/dancluna/code/sbcl/output")
  (setq sly-lisp-implementations
        '((ecl ("ecl"))
          (sbcl ("/usr/bin/sbcl"))))
  (dolist (hook '(lisp-mode-hook emacs-lisp-mode-hook clojure-mode-hook))
    (add-hook hook (lambda () (paredit-mode 1) (diminish 'paredit-mode " ⍢"))))
  (add-hook 'lisp-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'clojure-mode-hook 'eldoc-mode)
    #+END_SRC
*** ASM
    For instruction lookup, asm-mode relies on [[file:~/Documents/books/Programming/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf][this file]].
    #+BEGIN_SRC emacs-lisp
  (setq x86-lookup-pdf "~/Documents/books/Programming/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf") ;; asm-mode 
    #+END_SRC

*** Haskell
    #+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'intero-mode)
    #+END_SRC
*** Ruby
    #+BEGIN_SRC emacs-lisp
  (add-hook 'sass-mode-hook 'rainbow-mode)
  (add-hook 'ruby-mode-hook 'dcl/ruby-special-setup)
  (add-hook 'enh-ruby-mode-hook 'dcl/ruby-special-setup)
  (add-hook 'haml-mode-hook 'dcl/haml-special-setup)
  (add-hook 'coffee-mode-hook 'dcl/coffee-special-setup)
  (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)

  (setup-rails-linters)

  (load "~/code/rspec-mode/rspec-mode") ; I run a local version and this has some extra goodies

  (setq inf-ruby-breakpoint-pattern "\\(\\[1\\] pry(\\)\\|\\(\\[1\\] haystack\\)\\|\\((rdb:1)\\)\\|\\((byebug)\\)")
    #+END_SRC
**** Env toggles
     #+BEGIN_SRC emacs-lisp
       (progn
         (dcl/add-env-toggle "POLTERGEIST_DEBUG" "p")
         (dcl/add-env-toggle "RUBY_PROF" "rp")
         (dcl/add-env-toggle "RUBY_PROF_MEASURE_MODE" "rm" (completing-read "Measure mode (default: wall): " '(wall process cpu allocations memory gc_time gc_runs)))
         (dcl/add-env-toggle "RUBY_BULLET" "rb")
         (dcl/add-env-toggle "RUBY_PROF_PROFILE_SPECS" "rs")
         (dcl/add-env-toggle "VCR_RERECORD" "rvr")
         (dcl/add-env-toggle "REAL_REQUESTS" "rvq")
         (dcl/add-env-toggle "IM_BATSHIT_CRAZY" "rkc")
         (dcl/add-env-toggle "RSPEC_RETRY_RETRY_COUNT" "rtc")
         (dcl/add-env-toggle "CAPYBARA_TIMEOUT" "rc" (number-to-string (read-number "New Capybara timeout (secs): ")))
         (dcl/add-env-toggle "ADWORDS_TIMEOUT" "rat" (number-to-string (read-number "New Adwords gem timeout (secs): "))))
     #+END_SRC
*** Javascript
    #+BEGIN_SRC emacs-lisp
  (require 'indium)
  (add-hook 'js2-mode-hook #'indium-interaction-mode)
    #+END_SRC
*** nov.el
    #+BEGIN_SRC emacs-lisp
  (setq nov-text-width 200)
    #+END_SRC
*** Slack
    #+BEGIN_SRC emacs-lisp
  (defadvice slack-start (before load-slack-teams)
    (unless slack-teams (load-file "~/.slack-teams.el.gpg")))
    #+END_SRC
*** Org-mode
    #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
    #+END_SRC
*** Emacspeak
    #+BEGIN_SRC emacs-lisp
  (dcl/enable-emacspeak)
    #+END_SRC
*** Javaprop-mode
    #+BEGIN_SRC emacs-lisp
  (add-hook 'conf-javaprop-mode-hook '(lambda () (conf-quote-normal nil)))
    #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp
  (helm-mode 1) ;; for some reason, all the describe-* goodness is not working with Spacemacs v.0.103.2 unless I add this line
    #+END_SRC
** Auto-insert
    #+BEGIN_SRC emacs-lisp
      (use-package autoinsert
          :init (progn
                  (add-hook 'find-file-hook 'auto-insert)
                  (auto-insert-mode 1)))

      (eval-after-load 'autoinsert
          '(progn
             (setq auto-insert-query nil)
             <<custom-auto-inserts>>
             ))
    #+END_SRC

*** Custom auto-inserts
    :PROPERTIES:
    :header-args: :noweb-ref custom-auto-inserts :tangle no
    :END:

**** Typescript
    #+BEGIN_SRC emacs-lisp
      (define-auto-insert '(typescript-mode . "TS skeleton")
               '("Header"
                 "\"use strict\";\n"))
    #+END_SRC

** Yasnippets
    #+BEGIN_SRC emacs-lisp
  (setq yas--default-user-snippets-dir (expand-file-name "yasnippets" "/mnt/lmde/home/dancluna"))
    #+END_SRC
** Evil
   #+BEGIN_SRC emacs-lisp
     (evil-global-set-key 'normal (kbd "K") 'newline-and-indent)
     (evil-global-set-key 'normal (kbd "g b") 'browse-url-at-point)

     (add-hook 'anaconda-mode-hook (lambda ()
                                     (evil-global-set-key 'normal (kbd "C-,") 'pop-tag-mark)))

     (evil-leader/set-key (kbd "g d") 'magit-diff-staged)

     (evil-leader/set-key (kbd "g u") 'magit-set-tracking-upstream)
     (evil-leader/set-key (kbd "g U") 'magit-unset-tracking-upstream)
     (evil-leader/set-key (kbd "o g P c") 'endless/visit-pull-request-url)
     (evil-leader/set-key (kbd "o g y") 'github/copy-branch-url)
     (evil-leader/set-key (kbd "o g Y") 'github/copy-file-url)
     (evil-leader/set-key (kbd "o g p") 'dcl/create-branch-from-pivotal)
     (evil-leader/set-key (kbd "o g j") 'dcl/create-branch-from-jira)
     (evil-leader/set-key (kbd "o g b") 'dcl/magit-checkout-last-branch)
     (evil-leader/set-key (kbd "o g r") 'dcl/magit-branch-rebase)
     (evil-leader/set-key (kbd "o g h") 'magit-history-checkout)
     (evil-leader/set-key (kbd "o p t") 'dcl/pivotal-github-tasks-template)
     (evil-leader/set-key (kbd "o l !") 'dcl/evil-ex-run-current-line)
     (evil-leader/set-key (kbd "o n c") '0xc-convert)
     (evil-leader/set-key (kbd "o a") 'ascii-display)
     (evil-leader/set-key (kbd "o h H") 'howdoi-query)

     (spacemacs/set-leader-keys-for-major-mode 'python-mode "sp" 'python-shell-print-line-or-region)
     (spacemacs/set-leader-keys-for-major-mode 'ruby-mode "sl" 'ruby-eval-line)
     (spacemacs/set-leader-keys-for-major-mode 'enh-ruby-mode "sl" 'ruby-eval-line)
     (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "ob" 'dcl/eshell-pipe-to-buffer)
     (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "os" 'dcl/eshell-circleci-ssh-to-tramp)
     (spacemacs/set-leader-keys-for-major-mode 'js2-mode "otp" 'mocha-test-at-point)
     (spacemacs/set-leader-keys-for-major-mode 'js2-mode "otf" 'mocha-test-file)
     (spacemacs/set-leader-keys-for-major-mode 'js2-mode "odp" 'mocha-debug-at-point)
     (spacemacs/set-leader-keys-for-major-mode 'js2-mode "odf" 'mocha-debug-file)

     (evil-leader/set-key-for-mode 'js2-mode "msr" 'skewer-eval-region)

     (evil-embrace-enable-evil-surround-integration)

     (add-to-list 'evil-normal-state-modes 'erc-mode)

     (evil-ex-define-cmd "slow[pokemode]" 'dcl/filip-slowpoke)
     (evil-ex-define-cmd "fast[pokemode]" 'dcl/normal-delay)

     (add-to-list 'evil-emacs-state-modes 'indium-debugger-mode)
   #+END_SRC
